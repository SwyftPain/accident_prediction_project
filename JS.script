<!DOCTYPE html>
<html>
  <head>
    <title>Real-time Maps Application</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f1f1f1;
      }

      h1 {
        text-align: center;
        padding: 20px 0;
        background-color: #4caf50;
        color: white;
        margin: 0;
      }

      .container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 4px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
      }

      .form-group input,
      .form-group select {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border-radius: 4px;
        border: 1px solid #ccc;
      }

      .button-container {
        text-align: center;
      }

      .button-container button {
        padding: 10px 20px;
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .button-container button:hover {
        background-color: #45a049;
      }

      #map {
        height: 400px;
        width: 100%;
        margin-bottom: 20px;
        border-radius: 4px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      #eta {
        margin-top: 20px;
        text-align: center;
        font-size: 18px;
        animation: fade-in 1s ease;
      }

      #eta span {
        font-weight: bold;
      }

      @keyframes fade-in {
        0% {
          opacity: 0;
        }
        100% {
          opacity: 1;
        }
      }
    </style>
  </head>

  <body>
    <h1>Real-time Maps Application</h1>
    <div class="container">
      <div class="form-group">
        <label for="origin">Origin:</label>
        <input type="text" id="origin" placeholder="Enter origin address" />
      </div>
      <div class="form-group">
        <label for="destination">Destination:</label>
        <input
          type="text"
          id="destination"
          placeholder="Enter destination address"
        />
      </div>
      <div class="form-group">
        <label for="mode">Mode of Transport:</label>
        <select id="mode">
          <option value="DRIVING">Driving</option>
          <option value="WALKING">Walking</option>
          <option value="BICYCLING">Bicycling</option>
          <option value="TRANSIT">Transit</option>
        </select>
      </div>
      <div class="button-container">
        <button id="calculateRouteButton">Calculate Route</button>
        <button id="toggleTrackingButton">Toggle Tracking</button>
      </div>
      <div id="map"></div>
      <div id="eta"></div>
      <div id="popularTime"></div>
      <div id="weather"></div>
      <div id="directionsPanel"></div>
    </div>
    <script>
      // Replace 'YOUR_GOOGLE_MAPS_API_KEY' with your actual Google Maps API key
      const apiKey = "API_KEY";

      // Replace 'YOUR_OPENWEATHER_API_KEY' with your actual OpenWeather API key
      const weatherStackApiKey = "API_KEY";
      let map;
      let directionsService;
      let directionsRenderer;
      let trackingEnabled = false;
      let currentPositionMarker;
      let directionsDisplay;
      let destination;
      let mode;

      function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
          zoom: 10,
          center: { lat: 0, lng: 0 },
        });

        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer();
        directionsRenderer.setMap(map);

        const originInput = document.getElementById("origin");
        const destinationInput = document.getElementById("destination");
        const modeSelect = document.getElementById("mode");

        const autocompleteOrigin = new google.maps.places.Autocomplete(
          originInput
        );
        const autocompleteDestination = new google.maps.places.Autocomplete(
          destinationInput
        );

        const calculateRouteButton = document.getElementById(
          "calculateRouteButton"
        );
        calculateRouteButton.addEventListener("click", calculateRoute);

        const toggleTrackingButton = document.getElementById(
          "toggleTrackingButton"
        );
        toggleTrackingButton.addEventListener("click", toggleTracking);

        directionsDisplay = new google.maps.DirectionsRenderer({
          panel: document.getElementById("directionsPanel"),
        });

        function calculateRoute() {
          const origin = originInput.value;
          destination = destinationInput.value;
          mode = modeSelect.value;

          const request = {
            origin: origin,
            destination: destination,
            travelMode: mode,
          };

          directionsService.route(request, function (result, status) {
            if (status === "OK") {
              directionsRenderer.setDirections(result);
              directionsDisplay.setDirections(result);
              displayETA(result);
              fetchWeather(destination);
              fetchPopularTime(destination);
            } else {
              window.alert("Directions request failed due to " + status);
            }
          });
        }

        function toggleTracking() {
          if (!trackingEnabled) {
            if (navigator.geolocation) {
              navigator.geolocation.watchPosition(
                updateCurrentPosition,
                handleLocationError
              );
              toggleTrackingButton.textContent = "Stop Tracking";
              trackingEnabled = true;
            } else {
              window.alert("Geolocation is not supported by this browser.");
            }
          } else {
            if (currentPositionMarker) {
              currentPositionMarker.setMap(null);
            }
            toggleTrackingButton.textContent = "Start Tracking";
            trackingEnabled = false;
          }
        }

        function updateCurrentPosition(position) {
          const latitude = position.coords.latitude;
          const longitude = position.coords.longitude;
          const currentPosition = new google.maps.LatLng(latitude, longitude);

          if (currentPositionMarker) {
            currentPositionMarker.setPosition(currentPosition);
          } else {
            currentPositionMarker = new google.maps.Marker({
              position: currentPosition,
              map: map,
              title: "Current Position",
            });
          }

          if (trackingEnabled) {
            updateDirections(currentPosition);
          }
        }

        function updateDirections(currentPosition) {
          const request = {
            origin: currentPosition,
            destination: destination,
            travelMode: mode,
          };

          directionsService.route(request, function (result, status) {
            if (status === "OK") {
              directionsRenderer.setDirections(result);
              directionsDisplay.setDirections(result);
              displayETA(result);
              fetchWeather(destination);
            } else {
              window.alert("Directions request failed due to " + status);
            }
          });
        }

        function displayETA(result) {
          const route = result.routes[0];
          if (route && route.legs.length > 0) {
            const duration = route.legs[0].duration.text;
            const departureTime = getCurrentTime(); // Get the current time
            const arrivalTime = calculateArrivalTime(departureTime, duration);
            const etaElement = document.getElementById("eta");
            etaElement.innerHTML = `<h3>Time to Arrive: ${duration}</h3><p>Arrival Time: ${arrivalTime}</p>`;
          }
        }

        function getCurrentTime() {
          const now = new Date();
          const hours = now.getHours().toString().padStart(2, "0");
          const minutes = now.getMinutes().toString().padStart(2, "0");
          console.log(`${hours}:${minutes}`);
          return `${hours}:${minutes}`;
        }

        function calculateArrivalTime(departureTime, duration) {
          const [departureHours, departureMinutes] = departureTime.split(":");

          // Extract the duration hours and minutes from the duration string
          const durationMatch = duration.match(/(\d+)\s*hour/);
          const durationHours = durationMatch ? parseInt(durationMatch[1]) : 0;
          const durationMinutes = parseInt(duration.match(/(\d+)\s*min/)[1]);

          const departureDate = new Date();
          departureDate.setHours(parseInt(departureHours));
          departureDate.setMinutes(parseInt(departureMinutes));

          const arrivalDate = new Date(
            departureDate.getTime() +
              (durationHours * 60 + durationMinutes) * 60 * 1000
          );

          // Format the arrival time
          const arrivalHours = arrivalDate.getHours() % 12 || 12;
          const arrivalMinutes = arrivalDate
            .getMinutes()
            .toString()
            .padStart(2, "0");
          const amPm = arrivalDate.getHours() >= 12 ? "PM" : "AM";

          // Format the day and date
          const options = { weekday: "long", month: "long", day: "numeric" };
          const arrivalDay = arrivalDate.toLocaleDateString("en-US", options);

          return `${arrivalHours}:${arrivalMinutes} ${amPm}, ${arrivalDay}`;
        }

        function fetchWeather(destination) {
          const apikey = weatherStackApiKey; // Replace with your OpenWeatherMap API key
          const geocoder = new google.maps.Geocoder();
          geocoder.geocode(
            { address: destination },
            function (results, status) {
              if (status === "OK" && results[0]) {
                const location = results[0].geometry.location;
                const lat = location.lat();
                const lng = location.lng();
                const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${apikey}`;

                fetch(url)
                  .then((response) => response.json())
                  .then((data) => {
                    const weatherElement = document.getElementById("weather");
                    const weatherDescription = data.weather[0].description;
                    const temperature = data.main.temp - 273.15; // Convert temperature from Kelvin to Celsius
                    const humidity = data.main.humidity;

                    weatherElement.innerHTML = `
            <h3>Weather Information:</h3>
            <p><strong>Description:</strong> ${weatherDescription}</p>
            <p><strong>Temperature:</strong> ${temperature.toFixed(2)}°C</p>
            <p><strong>Humidity:</strong> ${humidity}%</p>
          `;

                    // Make API call to Python script to fetch popular time
                    fetchPopularTime(destination);
                  })
                  .catch((error) => {
                    console.error("Error fetching weather data:", error);
                  });
              } else {
                console.error(
                  "Geocode was not successful for the following reason:",
                  status
                );
              }
            }
          );
        }

        function fetchPopularTime(destination) {
          fetch("/fetch_popular_time", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              destination: destination,
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              console.log(data);
              const popularTimeElement = document.getElementById("popularTime");
              if (data.popular_time === "Not available") {
                popularTimeElement.textContent =
                  "Popular time data is not available for this destination.";
              } else {
                popularTimeElement.textContent =
                  "Popular Time: " + data.popular_time;
              }
            })
            .catch((error) => console.error(error));
        }

        function handleLocationError(error) {
          switch (error.code) {
            case error.PERMISSION_DENIED:
              window.alert("User denied the request for Geolocation.");
              break;
            case error.POSITION_UNAVAILABLE:
              window.alert("Location information is unavailable.");
              break;
            case error.TIMEOUT:
              window.alert("The request to get user location timed out.");
              break;
            case error.UNKNOWN_ERROR:
              window.alert("An unknown error occurred.");
              break;
          }
        }
      }
    </script>
    <script
      src="https://maps.googleapis.com/maps/api/js?key=GOOGLE_API_KEY_HERE&libraries=places&callback=initMap"
      async
      defer
    ></script>
  </body>
</html>
